// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebsiteBanHang.Models;

namespace WebsiteBanHang.Migrations
{
    [DbContext(typeof(SaleDBContext))]
    [Migration("20190101033012_ImageLength")]
    partial class ImageLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("District")
                        .HasMaxLength(256);

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Province")
                        .HasMaxLength(256);

                    b.Property<string>("Street")
                        .HasMaxLength(256);

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Ward")
                        .HasMaxLength(256);

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.CartDetails", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrderImportGoodsDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderImportGoodsDetails");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("District")
                        .HasMaxLength(256);

                    b.Property<string>("FullName")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status");

                    b.Property<string>("Street")
                        .HasMaxLength(256);

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Ward")
                        .HasMaxLength(256);

                    b.HasKey("OrderId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrdersImportGoods", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("OrdersImportGoods");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrderStatuses", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName");

                    b.HasKey("StatusId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.ProductCategories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(256);

                    b.HasKey("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.ProductImages", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<string>("Url");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImagse");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<bool>("Discontinued");

                    b.Property<double>("Discount");

                    b.Property<bool>("DisplayIndex");

                    b.Property<int>("Guarantee");

                    b.Property<string>("Image")
                        .HasMaxLength(3000)
                        .IsUnicode(false);

                    b.Property<decimal>("ImportPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(256);

                    b.Property<double>("Rate");

                    b.Property<int>("Stock");

                    b.Property<string>("Summary");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Replies", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRate");

                    b.Property<int?>("Likes");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Rate");

                    b.Property<int?>("ReplyByReply");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("ReplyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReplyByReply");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.SlideShow", b =>
                {
                    b.Property<int>("SlideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SlideID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("Link")
                        .HasMaxLength(256);

                    b.Property<bool?>("Status");

                    b.HasKey("SlideId");

                    b.ToTable("SlideShow");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200);

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<string>("Ward")
                        .HasMaxLength(50);

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool?>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.UserInfo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .HasMaxLength(256);

                    b.Property<bool?>("Gender");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("IX_UserInfo_1")
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebsiteBanHang.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Address", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.UserInfo", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Address_UserInfo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebsiteBanHang.Models.CartDetails", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.Products", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CartDetails_Products")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebsiteBanHang.Models.UserInfo", "UserInfo")
                        .WithMany("CartDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CartDetails_UserInfo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrderDetails", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Orders")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebsiteBanHang.Models.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetails_Products");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrderImportGoodsDetails", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.OrdersImportGoods", "Order")
                        .WithMany("OrderImportGoodsDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderImportGoodsDetails_OrdersImportGoods");

                    b.HasOne("WebsiteBanHang.Models.Products", "Product")
                        .WithMany("OrderImportGoodsDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderImportGoodsDetails_Products");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Orders", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.OrderStatuses", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Orders_OrderStatuses");

                    b.HasOne("WebsiteBanHang.Models.UserInfo", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Orders_UserInfo");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.OrdersImportGoods", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.Suppliers", "Supplier")
                        .WithMany("OrdersImportGoods")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_OrdersImportGoods_Suppliers");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.ProductImages", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.Products", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImages_Products")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Products", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.ProductCategories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_ProductCategories")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebsiteBanHang.Models.Replies", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.Products", "Product")
                        .WithMany("Replies")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Replies_Products");

                    b.HasOne("WebsiteBanHang.Models.Replies", "ReplyByReplyNavigation")
                        .WithMany("InverseReplyByReplyNavigation")
                        .HasForeignKey("ReplyByReply")
                        .HasConstraintName("FK_Replies_Replies");

                    b.HasOne("WebsiteBanHang.Models.UserInfo", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Replies_UserInfo");
                });

            modelBuilder.Entity("WebsiteBanHang.Models.UserInfo", b =>
                {
                    b.HasOne("WebsiteBanHang.Models.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("WebsiteBanHang.Models.UserInfo", "UserId")
                        .HasConstraintName("FK_UserInfo_Account")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
